{"name":"ControlConsumoElect","type":"virtual_device","properties":{"deviceIcon":1055,"currentIcon":"1055","log":"","logTemp":"","mainLoop":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nglobalVarName = 'consumoEnergia'-- nombre de la variable global para almacenar\n\t\t\t\t\t\t\t\t-- consumo\nlocal diaCambioCiclo = '21'\t-- dia del mes en que cambia el ciclo de facturacion\nOFF=1;INFO=2;DEBUG=3\t\t-- esto es una referencia para el log, no cambiar\nnivelLog = DEBUG\t\t\t-- nivel de log\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.mainLoop', ver=0, mayor=0,\n minor=2}\n-- obtener el ID de este dispositivo virtual\nlocal _selfId = fibaro:getSelfId();\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\ngetConsumoOrigen()\n\tdevuelve el consumo inicial valor, unidad, fecha mmddhh\n--]]\nfunction getOrigen()\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  -- ordenar la tabla para compara tomar el primer valor\n  local u = {}\n  for k, v in pairs(consumoTab) do table.insert(u, { key = k, value = v }) end\n  table.sort(u, function (a1, a2) return a1.key < a2.key; end)\n  return u[1].key\nend\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n--[[--------BUCLE DE CONTROL -------------------------------------------------]]\n_log(DEBUG, \"Iniciando...\")\nwhile true do\n  --[[-------- ACTUALIZAR CONSUMO Y FACTURA VIRTUAL --------------------------]]\n  -- invocar al boton de actualizacion de datos\n  fibaro:call(_selfId, \"pressButton\", \"14\")\n\n  --[[-CADA HORA --------------- ---------------------------------------------]]\n    --if (tonumber(os.date(\"%M\"))==0 and tonumber(os.date(\"%S\"))==1) then\n    --_log(DEBUG, 'actualización horaria')\n  --end\n  --[[- FIN CADA HORA --------------------------------------------------------]]\n\n  --[[-CADA CICLO DE FACTUARCION ---------------------------------------------]]\n  local mesOrigen = tonumber(string.sub(getOrigen(), 1, 2))\n  local mesActual = tonumber(os.date(\"%m\"))\n  -- ajustar cambio de año\n  if mesOrigen == 12 then mesOrigen = 0 end\n  if (diaCambioCiclo == os.date(\"%d\")) and\n   (mesActual == mesOrigen + 1) then\n    -- invocar al boton de reseteo de datos\n    fibaro:call(_selfId, \"pressButton\", \"15\")\n    _log(DEBUG, 'reinicio de ciclo de facturación '..getOrigen())\n  end\n  --[[-FIN CICLO DE FACTUARCION ----------------------------------------------]]\n\n  fibaro:sleep(60*1000);\n  _log(DEBUG, \"bucle\");\nend\n--[[--------------------------------------------------------------------------]]\n","ui.ActualOrigen.value":"43.8 kWh","ui.AlquilerEquipos.value":"0.66 €","ui.IVA.value":"3.71 €","ui.ImpuestoElectricidad.value":"0.83 €","ui.PotenciaMedia.value":"568.73 W","ui.PrecioHora.value":"0.12711 €/kWh","ui.TerminoConsumo.value":"3.45 €","ui.TerminoFijo.value":"12.72 €","ui.Total.value":"21.36 €","ui.UltimaHora.value":"0.48 kWh / 0.06 €","ui.Ultimas24H.value":"9.21 kWh / 1.17 €","ui.UltimoMes.value":"27.13 kWh / 3.45 €","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Consumo origen:","name":"ActualOrigen","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Potencia media:","name":"PotenciaMedia","favourite":false,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Acum.Ult.Hora:","name":"UltimaHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"Acum.Ult.Día:","name":"Ultimas24H","favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"Acumu.Ciclo:","name":"UltimoMes","favourite":false,"main":false}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"Precio Actual:","name":"PrecioHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"Término fijo","name":"TerminoFijo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"Término consumo","name":"TerminoConsumo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"Alquiler Equipo","name":"AlquilerEquipos","favourite":false,"main":false}]},{"type":"label","elements":[{"id":10,"lua":false,"waitForResponse":false,"caption":"Impuesto Elect.","name":"ImpuestoElectricidad","favourite":false,"main":false}]},{"type":"label","elements":[{"id":11,"lua":false,"waitForResponse":false,"caption":"IVA","name":"IVA","favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"Total factura","name":"Total","favourite":true,"main":true}]},{"type":"button","elements":[{"id":13,"lua":true,"waitForResponse":false,"caption":"Reset","name":"resetButton","empty":false,"msg":"--[[Control de consumo\n\tVD Consumo\n\tboton reset resetButton.lua\n\tpor Antonio Maestre & Manuel Pascual\n--------------------------------------------------------------------------------]]\nrelease = {name='controConsumo resetButton', ver=0, mayor=0, minor=1}\n\n--[[----- CONFIGURACION DE USUARIO ---------------------------------------------]]\nglobalVarName = 'consumoEnergia'\t-- nombre de la variable global\nenergyDev = 512\t\t\t\t-- ID del dispositivo de energia\npropertyName = 'energy'\t\t-- propiedad del dispositivo para recuperar la energia\n\t\t\t\t\t\t\t-- acumulada en kWh\nOFF=1;INFO=2;DEBUG=3\t\t-- esto es una referencia para el log, no cambiar\nnivelLog = DEBUG\t\t\t-- nivel de log\n--[[----- FIN CONFIGURACION DE USUARIO -----------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI --------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA -----------------------------------------------]]\n--[[consumoTab\n  tabla para almacenar consumos horarios, se usa el indice para almacenar\n  la hora, dia y mes 'mmddhh' y una tabla con el valor y la unidad, ej.\n  consumo de las 12 de la mañana del dia 17 de septiembre\n  consumo['121709'] = {valor=0.1234, unidad=kWh'}\n  --]]\n  -- obtener el ID de este dispositivo virtual\n  local _selfId = fibaro:getSelfId();\n--[[----- FIN CONFIGURACION AVANZADA -------------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n--------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  local LOG = {}\n  LOG[1]='OFF'; LOG[2]='INFO'; LOG[3]='DEBUG';\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[------------------------------------------------------------------------------\nformatConsumo()\n\tinserta un valor 0 en todos los posibles valores de la tabla de consumos\n--]]\nfunction formatConsumo()\n  local consumoTab = {}\n  for m = 1, 12 do\n    local mes = string.format('%.2d',m)\n    for d = 1, 31 do\n      local dia = string.format('%.2d',d)\n        for h = 1, 24 do\n          local hora = string.format('%.2d',h)\n          local indConsumo = mes..dia..hora\n          consumoTab[indConsumo] = {valor = 0, unidad = 'kWh'}\n        end\n    end\n  end\n  fibaro:setGlobal(globalVarName, json.encode(consumo))\n  return 0\nend\n\n--[[------------------------------------------------------------------------------\nresetConsumo()\n\tinicializa (vacia) la tabla de consumos\n--]]\nfunction resetConsumo()\n  local consumoTab = {}\n  fibaro:setGlobal(globalVarName, json.encode(consumoTab))\n  -- almacenar consumo actual\n  local consumoActual = tonumber(fibaro:getValue(energyDev, propertyName))\n  return setConsumo(consumoActual)\nend\n\n--[[------------------------------------------------------------------------------\nsetConsumo(hora, dia, mes, valor)\n\talmacena el consumo horario.\n\tsi se pasa 1 parametro lo almacena en la hora actual del sistema (valor)\n\ten otro caso debe recibir 4 parametros indicando (hora, dia, mes, valor)\n--]]\nfunction setConsumo(a, b, c, d)\n  local hora = 0\n  local dia = 0\n  local mes = 0\n  local valor = 0\n  if not a then return 1 -- error\n  elseif not b then -- setear consumo actual\n    hora = tonumber(os.date(\"%H\"))\n    dia = tonumber(os.date(\"%d\"))\n    mes = tonumber(os.date(\"%m\"))\n    valor = a\n  elseif not c then return 2 -- error\n  elseif not d then return 3 -- error\n  else -- setear consumo hora\n    hora = a\n    dia = b\n    mes = c\n    valor = d\n  end\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  local mes = string.format('%.2d',mes)\n  local dia = string.format('%.2d',dia)\n  local hora = string.format('%.2d',hora)\n  local indConsumo = mes..dia..hora\n  consumoTab[indConsumo] = {valor = valor, unidad = 'kWh'}\n  fibaro:setGlobal(globalVarName, json.encode(consumoTab))\n  return 0\nend\n\n--[[------- INICIA LA EJECUCION ------------------------------------------------]]\n-- resetear la tabla de consumos \nlocal status = resetConsumo()\n-- invocar al boton de actualizacion de datos\nfibaro:call(_selfId, \"pressButton\", \"14\")\n--[[----- FIN DE LA EJECUCION --------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ------------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fibaro:getGlobalValue(globalVarName))\n--[[----- FIN INFORME DE RESULTADOS --------------------------------------------]]\n--[[----------------------------------------------------------------------------]]\n","buttonIcon":1055,"favourite":false,"main":false},{"id":14,"lua":true,"waitForResponse":false,"caption":"Actualizar","name":"updateButton","empty":false,"msg":"--[[Control de consumo\n\tVD Consumo\n\tboton actualizarFactura.lua\n\tpor Antonio Maestre & Manuel Pascual\n--------------------------------------------------------------------------------]]\nrelease = {name='controlConsumo updateButton', ver=0, mayor=0, minor=2}\n\n--[[----- CONFIGURACION DE USUARIO ---------------------------------------------]]\nglobalVarName = 'consumoEnergia'-- nombre de la variable global para almacenar consumo\nlocal preciokwhterminofijo=0.115188;\nlocal pvpc=true\nlocal pvpcTipoTarifa = '20'\t\t\t\t-- '20', '20H', '20HS'\nlocal potenciacontratadakw=4.6;\nlocal preciokwhmercadolibre=0.12;\nlocal precioalquilerequipodia=0.027616;\nlocal porcentajeIVA=21;\nlocal porcentajeimpuestoelectricidad=5.11269632;\n--[[----- FIN CONFIGURACION DE USUARIO -----------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI --------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA -----------------------------------------------]]\n-- obtener el ID de este dispositivo virtual\nOFF=1;INFO=2;DEBUG=3\t\t-- esto es una referencia para el log, no cambiar\nnivelLog = DEBUG\t\t\t-- nivel de log\nlocal _selfId = fibaro:getSelfId();\n--[[----- FIN CONFIGURACION AVANZADA -------------------------------------------]]\n\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n--------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nredondea(num, idp)\n\t--\n--]]\nfunction redondea(num, idp)\n  local mult = 10^(idp or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n--[[----------------------------------------------------------------------------\ngetPreciohora(hora)\n\t--\n--]]\nfunction getPreciohora(hora)\n  local cnomys = Net.FHttp(\"pvpc.cnomys.es\")\n  \n  -- Discover available APIs and corresponding information\n  payload = '/hora'\n  response, status, errorCode = cnomys:GET(payload)\n  if tonumber(status) == 200 then\n    local jsonTable = json.decode(response)\n    if (jsonTable.estado == true) then\n      for key, value in pairs(normalizaPrecioHoraTab(jsonTable.datos)) do\n        if value.hora == hora then\n          return 0, value.precio\n        end\n      end \n    else\n      if jsonTable['razon_error'] then return 1, jsonTable['razon_error'] end\n      return 1, 'error desconocido'\n    end\n  else\n    return 1, errorCode\n  end\n  return 1,'La hora no corresponde con la actual'\nend\n\n--[[-----------------------------------------------------------------------------\nnormalizaPrecioHoraTab(precioHoraTab)\n\t--\n--]]\nfunction normalizaPrecioHoraTab(precioHoraTab)\n  local preciosTab = {}\n  for key, value in pairs(precioHoraTab) do\n    if value then\n      preciosTab[#preciosTab + 1] = {hora = key, precio = value[pvpcTipoTarifa]}\n    end\n  end\n  return preciosTab\nend\n\n--[[-----------------------------------------------------------------------------\ngetConsumo(a, b, c)\n\tdevuelve el consumo del mes, dia del mes u hora del dia del mes.\n\tsi se pasa 1 argumento,   se considera el (mes)\n\tsi se pasan 2 argumentos, se consideran (dia, mes)\n\tsi se pasan 3 argumentos, se consideran (hora, dia, mes)\n--]]\nfunction getConsumo(a, b, c)\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  local clave = ''\n  -- otener el consumo origen por si fuera necesario restarlo del total\n  local consumoIni, unidadIni, claveIni = getConsumoOrigen()\n  if not a then\n   local clave = ' '\n  elseif not b then\n    clave = string.format('%.2d',a)\n  elseif not c then\n    clave= string.format('%.2d',b)..string.format('%.2d',a)\n  else\n    clave= string.format('%.2d',c)..string.format('%.2d',b)..\n    string.format('%.2d',a)\n  end\n  local consumo = 0\n  for key, value in pairs(consumoTab) do\n    if (clave == string.sub(key, 1, #clave)) and (key ~= claveIni) then\n      consumo = consumo + value.valor\n      unidad = value.unidad\n    end\n    -- consumo = consumo + getConsumoDia(d,mes)\n  end\n  -- retirar el consumo inicial\n  return consumo, unidad\nend\n\n--[[-----------------------------------------------------------------------------\ngetConsumoOrigen()\n\tdevuelve el consumo inicial valor, unidad, fecha mmddhh\n--]]\nfunction getConsumoOrigen()\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  -- ordenar la tabla para compara tomar el primer valor\n  local u = {}\n  for k, v in pairs(consumoTab) do table.insert(u, { key = k, value = v }) end\n  table.sort(u, function (a1, a2) return a1.key < a2.key; end)\n  return u[1].value.valor, u[1].value.unidad, u[1].key\nend\n\n--[[----- INICIAR ----------------------------------------------------------]]\n-- obtener el precio kWh \nlocal preciokwh = preciokwhmercadolibre --TODO se puede obtener de una web?.\nif pvpc then\n  -- obtener el precio para esta hora\n  status, preciokwh = getPreciohora(os.date(\"%H\"))\n  -- si no se puede obtener precio\n  if status ~= 0 then\n    -- informar del error\n    _log(INFO, 'Error al obtener precio: '..preciokwh)\n    --  y tomar precio anterior\n    preciokwh = tonumber(string.sub(fibaro:get(_selfId, 'ui.PrecioHora.value'), 1, 7))\n  else\n    preciokwh = tonumber(preciokwh)\n  end\nend\n-- refrescar etiqueta de precio hora\nfibaro:call(_selfId, \"setProperty\", \"ui.PrecioHora.value\",preciokwh..' €/kWh')\n_log(DEBUG, 'Precio: '..preciokwh..' €/kWh')\nfibaro:log('Precio: '..preciokwh..' €/kWh')\n  \n-- obtener consumo origen y refrescar etiqueta de consumo origen\nfibaro:call(_selfId, \"setProperty\",\n \"ui.ActualOrigen.value\",tostring(getConsumoOrigen()) .. \" kWh\")\n   \n-- calcular consumo acumulado y potencia media de la ultima hora/fracion\nlocal hora = tonumber(os.date(\"%H\"))\nlocal dia = tonumber(os.date(\"%d\"))\nlocal mes = tonumber(os.date(\"%m\"))\nlocal consumoActual = getConsumo(hora, dia, mes)\nlocal tiempo = os.date('*t')\n-- si el consumo de la hora actual es 0 se toma la hora anterior\nif consumoActual == 0 then\n  hora = hora - 1\n  consumoActual = getConsumo(hora, dia, mes)\nend\ntiempo.min = 0;  tiempo.sec = 0; tiempo.hour = hora\ntiempo = (os.time() - os.time(tiempo))\n_log(DEBUG, 'Tiempo: '..tiempo..' seg.')\n-- potencia = kWh*3600/t\nlocal potenciaMedia = redondea(1000 * (consumoActual * 3600 / tiempo), 2)\n_log(DEBUG, 'Potencia media: '.. potenciaMedia..' W')\n_log(DEBUG, 'Consumo última hora: '..consumoActual)\n\n-- refrescar etiqueta consumo ultima hora\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimaHora.value\",\n redondea(consumoActual, 2)..\" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n \n -- refrescar etiqueta potencia media\nfibaro:call(_selfId, \"setProperty\", \"ui.PotenciaMedia.value\",\n potenciaMedia..' W')\n  \n-- calcular consumo acumulado del dia\nconsumoActual = getConsumo(tonumber(os.date(\"%d\")), tonumber(os.date(\"%m\")))\n_log(DEBUG, 'Consumo último día: '..consumoActual)\n-- refrescar etiqueta consumo del ultimo dia\nfibaro:call(_selfId, \"setProperty\", \"ui.Ultimas24H.value\",\n redondea(consumoActual, 2).. \" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n  \n-- calcular consumo del ultimo ciclo\nconsumoActual = getConsumo()\n_log(DEBUG, 'Consumo último ciclo: '..consumoActual)\n-- refrescar etiqueta consumo ultimo mes\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimoMes.value\",\n redondea(consumoActual, 2)..\" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n  \n--[[------- ACTUALIZAR FACTURA VIRTUAL -------------------------------------]]\n-- calcular precio termino fijo \nlocal euroterminofijopotenciames = potenciacontratadakw *\n preciokwhterminofijo * (tonumber(os.date(\"%d\")))\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoFijo.value\",\n redondea(euroterminofijopotenciames, 2) .. \" €\")\n   \n-- calcula el precio del consumo mes\nlocal euroterminoconsumo = getConsumo(tonumber(os.date('%m'))) * preciokwh\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoConsumo.value\",\n redondea(euroterminoconsumo, 2) .. \" €\")\n    \n-- calcular precio impuesto electricidad\nlocal impuestoelectricidad = (euroterminofijopotenciames+euroterminoconsumo) *\n porcentajeimpuestoelectricidad/100;\nfibaro:call(_selfId, \"setProperty\", \"ui.ImpuestoElectricidad.value\",\n redondea(impuestoelectricidad, 2) .. \" €\")\n \n-- calcular precio alquiler equipo\nlocal euroalquilerequipos = precioalquilerequipodia *\n (tonumber(os.date(\"%d\")));\nfibaro:call(_selfId, \"setProperty\", \"ui.AlquilerEquipos.value\",\n redondea(euroalquilerequipos, 2) .. \" €\")\n    \n-- calcular el IVA\nlocal IVA = (euroterminofijopotenciames + euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos) * porcentajeIVA/100\nfibaro:call(_selfId, \"setProperty\", \"ui.IVA.value\", redondea(IVA,2) .. \" €\")\n    \n-- calcular TOTAL\nlocal Total = euroterminofijopotenciames+euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos+IVA\nfibaro:call(_selfId, \"setProperty\", \"ui.Total.value\", \nredondea(Total,2) .. \" €\")\n--[[----- FIN DE LA EJECUCION --------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ------------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n--[[----- FIN INFORME DE RESULTADOS --------------------------------------------]]\n--[[----------------------------------------------------------------------------]]","buttonIcon":1055,"favourite":false,"main":true}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}