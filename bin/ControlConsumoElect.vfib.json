{"name":"ControlConsumoElect","type":"virtual_device","properties":{"deviceIcon":1066,"currentIcon":"1066","log":"","logTemp":"","mainLoop":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.mainLoop', ver=0, mayor=0, minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal diaCambioCiclo = fibaro:get(_selfId, 'ui.diaInicioCiclo.value')\ndiaCambioCiclo = tonumber(string.sub(diaCambioCiclo, 1, 2))\nglobalVarName = 'controlConsumo'    -- nombre de variable global almacen consumo\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nsetEstado()\n\tconfigura el estado del dispositivo virtual\n--]]\nfunction setEstado(estado, mensaje)\n  if estado then\n    mensaje = 'OK - '..mensaje\n  else\n    mensaje = 'STOP - '..mensaje\n  end\n  -- referscar etiqueta de estado\n  fibaro:call(_selfId, 'setProperty', 'ui.lbStatus.value', mensaje)\n  return estado\nend\n\n--[[----------------------------------------------------------------------------\ngetOrigen()\n\tdevuelve fecha origen en formato mmddhh\n--]]\nfunction getOrigen()\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  -- ordenar la tabla para compara tomar el primer valor\n  local u = {}\n  for k, v in pairs(consumoTab) do table.insert(u, { key = k, value = v }) end\n  table.sort(u, function (a1, a2) return a1.key < a2.key; end)\n  return u[1].key\nend\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and  timestamp > 0) then return true end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\nisEmptyVar(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isEmptyVar(varName)\n  -- comprobar si esta vacia\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (not valor or valor == '0') then return true end\n  return false\nend\n\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n-- configurar el estado del dispositivo\nestadoDispositivo = setEstado(true, 'Iniciando...')\n\n-- esperar si no existe la variable local para almacenar consumos\nwhile not isVariable(globalVarName) do\n  fibaro:sleep(1000)\n  -- refrescar la etiqueta status\n  setEstado(false, 'Definir variable global')\nend\n-- cambiar el estado\nsetEstado(true, 'Arrancando...')\n-- si la variable esta vacia\nif isEmptyVar(globalVarName) then\n  -- invocar al boton reset de datos para iciar el ciclo\n  fibaro:call(_selfId, \"pressButton\", \"5\")\n  -- esperar hasta que se haya iniciado el ciclo\n  while isEmptyVar(globalVarName) do\n    setEstado(false, 'Configurando variable global')\n  end\nend\n-- TODO activar escena\n\n--[[--------BUCLE DE CONTROL -------------------------------------------------]]\n_log(DEBUG, \"Iniciando...\")\nsetEstado(true, '')\nwhile true do\n  --[[-------- ACTUALIZAR CONSUMO Y FACTURA VIRTUAL --------------------------]]\n  -- invocar al boton de actualizacion de datos\n  fibaro:call(_selfId, \"pressButton\", \"6\")\n\n  --[[-CADA HORA --------------- ---------------------------------------------]]\n    --if (tonumber(os.date(\"%M\"))==0 and tonumber(os.date(\"%S\"))==1) then\n    --_log(DEBUG, 'actualización horaria')\n  --end\n  --[[- FIN CADA HORA --------------------------------------------------------]]\n\n  --[[-CADA CICLO DE FACTUARCION ---------------------------------------------]]\n  local mesOrigen = tonumber(string.sub(getOrigen(), 1, 2))\n  local mesActual = tonumber(os.date(\"%m\"))\n  -- ajustar cambio de año\n  if mesOrigen == 12 then mesOrigen = 0 end\n  if (diaCambioCiclo == tonumber(os.date(\"%d\"))) and\n   (mesActual == mesOrigen + 1) then\n    -- invocar al boton de reseteo de datos iniciar ciclo\n    setEstado(true, 'reiniciando ciclo de facturación')\n    fibaro:call(_selfId, \"pressButton\", \"5\")\n    _log(DEBUG, 'reinicio de ciclo de facturación '..getOrigen())\n  end\n  --[[-FIN CICLO DE FACTUARCION ----------------------------------------------]]\n\n  -- esperar hasta que la tabla de consumos sufra cambios para sincronizar el\n  -- dispositivo virtual con el fisico\n  local consumoStr = fibaro:getGlobalValue(globalVarName)\n  local newConsumoStr = consumoStr\n  _log(DEBUG, 'esperando...')\n  setEstado(true, 'Esperando lectura')\n  while consumoStr == newConsumoStr do\n    fibaro:sleep(1000)\n    newConsumoStr = fibaro:getGlobalValue(globalVarName)\n    -- durante la primera hora desde que se inicia el ciclo, la tabla no cambia\n  end\n  _log(DEBUG, 'actualizar')\n  setEstado(true, '')\nend\n--[[--------------------------------------------------------------------------]]\n","ui.ActualOrigen.value":"82.54 kWh","ui.AlquilerEquipos.value":"0.03 €","ui.IVA.value":"0.38 €","ui.ImpuestoElectricidad.value":"0.09 €","ui.PotenciaMedia.value":"0 W","ui.PrecioHora.value":"0.13522 €/kWh","ui.TerminoConsumo.value":"1.18 €","ui.TerminoFijo.value":"0.51 €","ui.Total.value":"2.18 €","ui.UltimaHora.value":"0 kWh / 0 €","ui.Ultimas24H.value":"0 kWh / 0 €","ui.UltimoMes.value":"8.73 kWh / 1.18 €","ui.diaInicioCiclo.value":"06/11/15","ui.lbStatus.value":"OK - Esperando lectura","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Consumo inicio","name":"ActualOrigen","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Próximo inicio","name":"diaInicioCiclo","favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"◀ Día","name":"downDiaButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tdownDiaButton.lua\n\tpor Manuel Pascual & Antonio Maestre\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.downDiaButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\nlocal dia, mes, anno, fecha\n-- obtener fecha desde la etiqueta\nfecha = fibaro:get(_selfId, 'ui.diaInicioCiclo.value')\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(string.sub(fecha, 1, 2))\nmes = tonumber(string.sub(fecha, 4, 5))\nanno = tonumber(string.sub(os.date('%Y'), 1, 2)..string.sub(fecha, 7, 8))\n-- retorceder un dia para obtener nueva fecha\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) - (24*60*60))\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fecha)\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"Día ▶","name":"upDiaButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tupDiaButton.lua\n\tpor Manuel Pascual & Antonio Maestre\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.upDiaButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\nlocal dia, mes, anno, fecha\n-- obtener fecha desde la etiqueta\nfecha = fibaro:get(_selfId, 'ui.diaInicioCiclo.value')\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(string.sub(fecha, 1, 2))\nmes = tonumber(string.sub(fecha, 4, 5))\nanno = tonumber(string.sub(os.date('%Y'), 1, 2)..string.sub(fecha, 7, 8))\n-- retorceder un dia para obtener nueva fecha\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) + (24*60*60))\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fecha)\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"Reset","name":"resetButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tresetButton.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nenergyDev = 547           -- ID del dispositivo de energia\npropertyName = 'value'\t\t-- propiedad del dispositivo para recuperar la energia\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.resetButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nglobalVarName = 'controlConsumo'    -- nombre de variable global almacen consumo\ntcpHC2 =  false                     -- objeto que representa una conexion TCP\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[consumoTab\n  tabla para almacenar consumos horarios, se usa el indice para almacenar\n  la hora, dia y mes 'mmddhh' y una tabla con el valor y la unidad, ej.\n  consumo de las 12 de la mañana del dia 17 de septiembre\n  consumo['121709'] = {valor=0.1234, unidad=kWh'}\n  --]]\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and  timestamp > 0) then return true end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\nresetConsumo()\n\tinicializa (vacia) la tabla de consumos\n--]]\nfunction resetConsumo()\n  -- comprobar si exite la variable global para almacenar consumos\n  if isVariable(globalVarName) then\n    -- vaciar variable global\n    fibaro:setGlobal(globalVarName, json.encode({}))\n    -- almacenar consumo actual\n    local consumoActual = tonumber(fibaro:getValue(energyDev, propertyName))\n    return setConsumo(consumoActual)\n  end\n  return {mensaje = 'No existe la variable global'}\nend\n\n--[[----------------------------------------------------------------------------\nsetConsumo(hora, dia, mes, valor)\n\talmacena el consumo horario.\n\tsi se pasa 1 parametro lo almacena en la hora actual del sistema (valor)\n\ten otro caso debe recibir 4 parametros indicando (hora, dia, mes, valor)\n--]]\nfunction setConsumo(a, b, c, d)\n  local hora = 0\n  local dia = 0\n  local mes = 0\n  local valor = 0\n  if not a then return 1 -- error\n  elseif not b then -- setear consumo actual\n    hora = tonumber(os.date(\"%H\"))\n    dia = tonumber(os.date(\"%d\"))\n    mes = tonumber(os.date(\"%m\"))\n    valor = a\n  elseif not c then return 2 -- error\n  elseif not d then return 3 -- error\n  else -- setear consumo hora\n    hora = a\n    dia = b\n    mes = c\n    valor = d\n  end\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  local mes = string.format('%.2d',mes)\n  local dia = string.format('%.2d',dia)\n  local hora = string.format('%.2d',hora)\n  local indConsumo = mes..dia..hora\n  consumoTab[indConsumo] = {valor = valor, unidad = 'kWh'}\n  fibaro:setGlobal(globalVarName, json.encode(consumoTab))\n  return 0\nend\n\n--[[----------------------------------------------------------------------------\ngetOrigen()\n\tdevuelve fecha origen en formato mmddhh\n--]]\nfunction getOrigen()\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  -- ordenar la tabla para compara tomar el primer valor\n  local u = {}\n  for k, v in pairs(consumoTab) do table.insert(u, { key = k, value = v }) end\n  table.sort(u, function (a1, a2) return a1.key < a2.key; end)\n  return u[1].key\nend\n\n--[[----------------------------------------------------------------------------\nbisiesto(anno)\n\tdevuelve true o false si es año(anno) bisiesto o no\n--]]\nfunction bisiesto(anno)\n  if (anno % 4 == 0 and (anno % 100 ~= 0 or anno % 400 == 0)) then\n    return true\n\tend\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDiasMes(mes, anno)\n\tdevuelve cuantos días tiene el mes(mes) del año(anno) indicados.\n--]]\nfunction getDiasMes(mes, anno)\n  local diasDelMes = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  if bisiesto(anno) then diasDelMes[2] = 29 end\n  return diasDelMes[mes]\nend\n\n--[[------- INICIA LA EJECUCION ----------------------------------------------]]\n-- resetear la tabla de consumos\n_log(INFO, resetConsumo())\n\n-- proponer como dia de inicio de ciclo el mismo dia del mes siguiente a la\n-- fecha origen de ciclo actual\nlocal clave, dia, mes, anno, dias, segs, fecha\n-- obtener fecha origen\nclave = getOrigen()\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(string.sub(clave, 3, 4))\nmes = tonumber(string.sub(clave, 1, 2))\nanno = tonumber(os.date('%Y'))\n-- averiguar los dias que tiene el mes\ndias = getDiasMes(mes, anno)\n-- averiguar los segundos que tiene el mes\nsegs = 86400 * dias\n-- saltar un mes\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) + segs)\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n_log(DEBUG, fecha)\n\n-- invocar al boton de actualizacion de datos\nfibaro:call(_selfId, \"pressButton\", \"6\")\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fibaro:getGlobalValue(globalVarName))\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"Act⏎","name":"updateButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tupdateButton.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nlocal potenciacontratadakw = 4.4                  -- potencia contratada\nlocal preciokwhmercadolibre = 0.141422            -- precio kWh mercado libre\nlocal precioalquilerequipodia = 0.028644          -- alquiler de contador\nlocal porcentajeIVA = 21                          -- % IVA\nlocal porcentajeimpuestoelectricidad = 5.1127     -- % impuesto de electricidad\nlocal preciokwhterminofijo = 0.115187             -- percio kWh termino fijo\nlocal pvpc = true                                 -- si se usa tarifa PVPC\nlocal pvpcTipoTarifa = '20'                       -- '20', '20H', '20HS'\nlocal porcentajeAjusteRecomendacion = 3           -- % por encima precio medio\nlocal iDIconoRecomendadoSI = 1067                 -- icomo recomendar consumo\nlocal iDIconoRecomendadoNO = 1066                 -- icono NO recomendar consumo\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.updateButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nglobalVarName = 'controlConsumo'    -- nombre de variable global almacen consumo\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nredondea(num, idp)\n  devuelve el numero (num) redondeado a (idp) decimales\n--]]\nfunction redondea(num, idp)\n  local mult = 10^(idp or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n--[[----------------------------------------------------------------------------\ngetPVPC(tipo)\n\tdevuelve el valor del pecio valuntario para pequeño consumidor de la hora o\n\tdel dia.\n\ttipo = 'dia'/'hora'\n--]]\nfunction getPVPC(tipo)\n  -- solo se puede recibir como parametro 'hora' o 'dia'\n  if (tipo ~='dia' and tipo ~='hora') then\n    return 1, 'solo se admite dia/hora'\n  end\n  local payload = '/'..tipo\n  -- si el tipo es hora, se toma la hora actual si no el dia de hoy\n  if tipo == 'hora' then tipo = os.date('%H') else tipo = 'hoy' end\n  local cnomys = Net.FHttp(\"pvpc.cnomys.es\")\n  response, status, errorCode = cnomys:GET(payload)\n  if tonumber(status) == 200 then\n    local jsonTable = json.decode(response)\n    if (jsonTable.estado == true) then\n      for key, value in pairs(normalizaPVPCTab(jsonTable.datos)) do\n        if value.clave == tipo then\n          return 0, value.precio\n        end\n      end\n    else\n      if jsonTable['razon_error'] then return 1, jsonTable['razon_error'] end\n      return 1, 'error desconocido'\n    end\n  else\n    return 1, errorCode\n  end\n  return 1, 'dia/hora no corresponde con el actual'\nend\n\n--[[-----------------------------------------------------------------------------\nnormalizaPVPCTab(precioTab)\n  -- recive una tabla de precio de cada hora representados por el indice y\n  -- devuelve una tabla con el formato {clave, precio} con los precios del tipo\n  -- de tarifa declarada en la variable pvpcTipoTarifa\n--]]\nfunction normalizaPVPCTab(precioTab)\n  local preciosTab = {}\n  for key, value in pairs(precioTab) do\n    if value then\n      preciosTab[#preciosTab + 1] = {clave = key, precio = value[pvpcTipoTarifa]}\n    end\n  end\n  return preciosTab\nend\n\n--[[----------------------------------------------------------------------------\ngetConsumo(a, b, c)\n\tdevuelve el consumo del mes, dia del mes u hora del dia del mes.\n\tsi se pasa 1 argumento,   se considera el (mes)\n\tsi se pasan 2 argumentos, se consideran (dia, mes)\n\tsi se pasan 3 argumentos, se consideran (hora, dia, mes)\n--]]\nfunction getConsumo(a, b, c)\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  local clave = ''\n  -- otener el consumo origen por si fuera necesario restarlo del total\n  local consumoIni, unidadIni, claveIni = getConsumoOrigen()\n  if not a then\n   local clave = ' '\n  elseif not b then\n    clave = string.format('%.2d',a)\n  elseif not c then\n    clave= string.format('%.2d',b)..string.format('%.2d',a)\n  else\n    clave= string.format('%.2d',c)..string.format('%.2d',b)..\n    string.format('%.2d',a)\n  end\n  local consumo = 0\n  for key, value in pairs(consumoTab) do\n    if (clave == string.sub(key, 1, #clave)) and (key ~= claveIni) then\n      consumo = consumo + value.valor\n      unidad = value.unidad\n    end\n    -- consumo = consumo + getConsumoDia(d,mes)\n  end\n  -- retirar el consumo inicial\n  return consumo, unidad\nend\n\n--[[----------------------------------------------------------------------------\ngetConsumoOrigen()\n\tdevuelve el consumo inicial valor, unidad, fecha mmddhh\n--]]\nfunction getConsumoOrigen()\n  local consumoTab = json.decode(fibaro:getGlobalValue(globalVarName))\n  -- ordenar la tabla para comparar tomar el primer valor\n  local u = {}\n  for k, v in pairs(consumoTab) do table.insert(u, { key = k, value = v }) end\n  table.sort(u, function (a1, a2) return a1.key < a2.key; end)\n  return u[1].value.valor, u[1].value.unidad, u[1].key\nend\n\n--[[----- INICIAR ------------------------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n-- obtener el precio kWh\nlocal preciokwh = preciokwhmercadolibre -- TODO se puede obtener de una web?.\nlocal precioMedioDia = 0\nif pvpc then\n  -- obtener el precio para esta hora\n  status, preciokwh = getPVPC('hora')\n  -- si no se puede obtener precio\n  if status ~= 0 then\n    -- informar del error\n    _log(INFO, 'Error al obtener precio hora: '..preciokwh)\n    --  y tomar precio anterior\n    preciokwh = tonumber(string.sub(fibaro:get(_selfId, 'ui.PrecioHora.value'),\n     1, 7))\n  else\n    preciokwh = tonumber(preciokwh)\n  end\n  -- obtener precio medio del día\n  status, precioMedioDia = getPVPC('dia')\n  -- si no se puede obtener precio medio dia\n  if status ~= 0 then\n    -- informar del error\n    _log(INFO, 'Error al obtener precio medio día: '..precioMedioDia)\n    --  y tomar precio hora no recomendable\n    precioMedioDia = preciokwh * (1 + porcentajeAjusteRecomendacion/100)\n  else\n    precioMedioDia = tonumber(precioMedioDia)\n  end\nend\n-- refrescar etiqueta de precio hora\nfibaro:call(_selfId, \"setProperty\", \"ui.PrecioHora.value\",preciokwh..' €/kWh')\n_log(DEBUG, 'Precio hora: '..preciokwh..' €/kWh')\n\n-- calcular recomendacion consumo\nlocal recomendacion = 'Aprovechar'\nlocal iconoRecomendado = iDIconoRecomendadoSI\nif (preciokwh > (precioMedioDia * (1 + porcentajeAjusteRecomendacion/100))) then\n\trecomendacion = 'Esperar'\n  iconoRecomendado = iDIconoRecomendadoNO\nend\n_log(DEBUG, 'Precio medio día: '..precioMedioDia ..' €/kwh')\n-- refrescar el log\nfibaro:log('Precio medio:'..precioMedioDia..'€/kWh  Actual:'..\npreciokwh..'€/kWh '..recomendacion)\n-- refrescar icono recomendacion\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", iconoRecomendado)\n\n-- obtener consumo origen\nlocal consumoOrigen, unidad, clave\nconsumoOrigen, unidad, clave = getConsumoOrigen()\n-- refrescar etiqueta de consumo origen\nfibaro:call(_selfId, \"setProperty\",\n \"ui.ActualOrigen.value\",tostring(consumoOrigen)..\" \"..unidad)\n\n-- calcular consumo acumulado y potencia media de la ultima hora/fracion\nlocal hora = tonumber(os.date(\"%H\"))\nlocal dia = tonumber(os.date(\"%d\"))\nlocal mes = tonumber(os.date(\"%m\"))\nlocal consumoActual = getConsumo(hora, dia, mes)\nlocal tiempo = os.date('*t')\n-- si el consumo de la hora actual es 0 se toma la hora anterior\nif consumoActual == 0 then\n  hora = hora - 1\n  consumoActual = getConsumo(hora, dia, mes)\nend\ntiempo.min = 0;  tiempo.sec = 0; tiempo.hour = hora\ntiempo = (os.time() - os.time(tiempo))\n_log(DEBUG, 'Tiempo: '..tiempo..' seg.')\n-- potencia = kWh*3600/t\nlocal potenciaMedia = redondea(1000 * (consumoActual * 3600 / tiempo), 2)\n_log(DEBUG, 'Potencia media: '.. potenciaMedia..' W')\n_log(DEBUG, 'Consumo última hora: '..consumoActual)\n\n-- refrescar etiqueta consumo ultima hora\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimaHora.value\",\n redondea(consumoActual, 2)..\" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n\n -- refrescar etiqueta potencia media\nfibaro:call(_selfId, \"setProperty\", \"ui.PotenciaMedia.value\",\n potenciaMedia..' W')\n\n-- calcular consumo acumulado del dia\nconsumoActual = getConsumo(tonumber(os.date(\"%d\")), tonumber(os.date(\"%m\")))\n_log(DEBUG, 'Consumo último día: '..consumoActual)\n-- refrescar etiqueta consumo del ultimo dia\nfibaro:call(_selfId, \"setProperty\", \"ui.Ultimas24H.value\",\n redondea(consumoActual, 2).. \" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n\n-- calcular consumo del ultimo ciclo\nconsumoActual = getConsumo()\n_log(DEBUG, 'Consumo último ciclo: '..consumoActual)\n-- refrescar etiqueta consumo ultimo mes\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimoMes.value\",\n redondea(consumoActual, 2)..\" kWh / \"..\n redondea(consumoActual*preciokwh, 2)..\" €\")\n\n--[[------- ACTUALIZAR FACTURA VIRTUAL ---------------------------------------]]\n-- proceso para obtener los dias transcurridos desde el inicio de ciclo\n-- obtener la fecha origen de ciclo\nlocal consumo, unidad, clave, anno, diasDesdeInicio\nconsumo, unidad, clave = getConsumoOrigen()\ndia = tonumber(string.sub(clave, 3, 4))\nmes = tonumber(string.sub(clave, 1, 2))\nanno = tonumber(os.date('%Y'))\n-- obtener timestamp del día origen de ciclo\nlocal timeOrigen = os.time({month = mes, day = dia, year = anno})\n-- obtener timestamp actual\nlocal timeAhora = os.time()\n-- calcular dias transcurridos desde inicio de ciclo\ndiasDesdeInicio = math.floor((timeAhora - timeOrigen) / (24*60*60)) + 1\n_log(DEBUG, 'Dias desde inicio de ciclo: '..diasDesdeInicio)\n-- FIN proceso\n\n-- calcular precio termino fijo\nlocal euroterminofijopotenciames = potenciacontratadakw * preciokwhterminofijo\n * diasDesdeInicio\n _log(DEBUG, 'Precio termino fijo: '..euroterminofijopotenciames)\n -- refrescar etiqueta precio termino fijo\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoFijo.value\",\n redondea(euroterminofijopotenciames, 2) .. \" €\")\n\n -- calcular consumo del ultimo ciclo y precio\nlocal euroterminoconsumo = getConsumo() * preciokwh\n_log(DEBUG, 'Precio termino consumo: '..euroterminoconsumo)\n-- refrescar etiqueta precio termino consumo\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoConsumo.value\",\n redondea(euroterminoconsumo, 2) .. \" €\")\n\n-- calcular precio impuesto electricidad\nlocal impuestoelectricidad = (euroterminofijopotenciames+euroterminoconsumo) *\n porcentajeimpuestoelectricidad/100\n _log(DEBUG, 'Precio impuesto electricidad: '..impuestoelectricidad)\n -- refrescar etiqueta precio impuesto electricidad\nfibaro:call(_selfId, \"setProperty\", \"ui.ImpuestoElectricidad.value\",\n redondea(impuestoelectricidad, 2) .. \" €\")\n\n-- calcular precio alquiler equipo\nlocal euroalquilerequipos = precioalquilerequipodia * diasDesdeInicio\n_log(DEBUG, 'Precio alquiler equipo: '..euroalquilerequipos)\n-- refrescar etiqueta precio alquiler equipo\nfibaro:call(_selfId, \"setProperty\", \"ui.AlquilerEquipos.value\",\n redondea(euroalquilerequipos, 2) .. \" €\")\n\n-- calcular el IVA\nlocal IVA = (euroterminofijopotenciames + euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos) * porcentajeIVA/100\n _log(DEBUG, 'IVA: '..IVA)\n -- refrescar etiqueta IVA\nfibaro:call(_selfId, \"setProperty\", \"ui.IVA.value\", redondea(IVA,2) .. \" €\")\n\n-- calcular TOTAL\nlocal Total = euroterminofijopotenciames+euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos+IVA\n _log(DEBUG, 'Total factura: '..Total)\n -- refrescar etiqueta total factura\nfibaro:call(_selfId, \"setProperty\", \"ui.Total.value\",\nredondea(Total,2) .. \" €\")\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"Potencia media","name":"PotenciaMedia","favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"Precio actual","name":"PrecioHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"Consumo hora","name":"UltimaHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":10,"lua":false,"waitForResponse":false,"caption":"Consumo día","name":"Ultimas24H","favourite":false,"main":false}]},{"type":"label","elements":[{"id":11,"lua":false,"waitForResponse":false,"caption":"Consumo ciclo","name":"UltimoMes","favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"Término fijo","name":"TerminoFijo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":13,"lua":false,"waitForResponse":false,"caption":"Término consumo","name":"TerminoConsumo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":14,"lua":false,"waitForResponse":false,"caption":"Alquiler Equipo","name":"AlquilerEquipos","favourite":false,"main":false}]},{"type":"label","elements":[{"id":15,"lua":false,"waitForResponse":false,"caption":"Impuesto Elect.","name":"ImpuestoElectricidad","favourite":false,"main":false}]},{"type":"label","elements":[{"id":16,"lua":false,"waitForResponse":false,"caption":"IVA","name":"IVA","favourite":false,"main":false}]},{"type":"label","elements":[{"id":17,"lua":false,"waitForResponse":false,"caption":"Total","name":"Total","favourite":true,"main":true}]},{"type":"label","elements":[{"id":18,"lua":false,"waitForResponse":false,"caption":"Estado","name":"lbStatus","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}