{"name":"ControlConsumoV21","type":"virtual_device","properties":{"deviceIcon":1055,"currentIcon":"1056","log":"Recomendación de consumo Aprovechar - 0.12942€/kWh","logTemp":"TxtGreen","mainLoop":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.mainLoop', ver=2, mayor=1, minor=0}\ncceEstado = 'cceEstado'     -- nombre variable global para almacenar el estado\ncceConsumo = 'cceConsumo'   -- nombre variable global para almacenar consumos\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n--[[--------BUCLE DE CONTROL -------------------------------------------------]]\nwhile true do\n  local mensaje = ''\n  fibaro:log(mensaje)\n  -- obtener mesaje de estado\n  local tablaEstado = json.decode(fibaro:getGlobalValue(cceEstado))\n  mensaje = tablaEstado.mensaje..' - '..tablaEstado.preciokwh..'€/kWh'\n  -- referscar log\n  fibaro:log(mensaje)\n  fibaro:sleep(1000)\nend\n--[[--------------------------------------------------------------------------]]\n","ui.ActualOrigen.value":"488.93 kWh","ui.AlquilerEquipos.value":"0.029 €","ui.IVA.value":"0.249 €","ui.ImpuestoElectricidad.value":"0.056 €","ui.PotenciaMedia.value":"922.22W","ui.PrecioHora.value":"0.12942 €/kWh","ui.TerminoConsumo.value":"0.594 €","ui.TerminoFijo.value":"0.507 €","ui.Total.value":"1.435 €","ui.UltimaHora.value":"1.08kWh/0.14€","ui.Ultimas24H.value":"4.58 kWh/0.59€","ui.UltimoCiclo.value":"4.58 kWh/0.59€","ui.diaInicioCiclo.value":"04/01/16","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Iniciado con","name":"ActualOrigen","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Próximo ciclo","name":"diaInicioCiclo","favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"◀ Día","name":"downDiaButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tdownDiaButton.lua\n\tpor Manuel Pascual & Antonio Maestre\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.downDiaButton', ver=2, mayor=0,\n minor=0}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal globalVarName = 'consumoV2'\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\nlocal dia, mes, anno, fecha\n-- obtener fecha desde la etiqueta\nfecha = fibaro:get(_selfId, 'ui.diaInicioCiclo.value')\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(string.sub(fecha, 1, 2))\nmes = tonumber(string.sub(fecha, 4, 5))\nanno = tonumber(string.sub(os.date('%Y'), 1, 2)..string.sub(fecha, 7, 8))\n-- retorceder un dia para obtener nueva fecha\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) - (24*60*60))\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n\n-- para otener estado de la recomendación recuperar la tabla de consumo\nlocal recomendacion\nctrlEnergia = json.decode(fibaro:getGlobalValue(globalVarName))\nrecomendacion = ctrlEnergia['estado'].recomendacion\n-- refrescar icono recomendacion\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", recomendacion)\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fecha)\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"Día ▶","name":"upDiaButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tupDiaButton.lua\n\tpor Manuel Pascual & Antonio Maestre\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.upDiaButton', ver=2, mayor=0,\n minor=0}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal globalVarName = 'consumoV2'\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----- COMIENZA LA EJECUCION ----------------------------------------------]]\nlocal dia, mes, anno, fecha\n-- obtener fecha desde la etiqueta\nfecha = fibaro:get(_selfId, 'ui.diaInicioCiclo.value')\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(string.sub(fecha, 1, 2))\nmes = tonumber(string.sub(fecha, 4, 5))\nanno = tonumber(string.sub(os.date('%Y'), 1, 2)..string.sub(fecha, 7, 8))\n-- retorceder un dia para obtener nueva fecha\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) + (24*60*60))\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n\n-- para otener estado de la recomendación recuperar la tabla de consumo\nlocal recomendacion\nctrlEnergia = json.decode(fibaro:getGlobalValue(globalVarName))\nrecomendacion = ctrlEnergia['estado'].recomendacion\n-- refrescar icono recomendacion\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", recomendacion)\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n_log(INFO, fecha)\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"Reset","name":"resetButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tresetButton.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nenergyDev = 544           -- ID del dispositivo de energia\npropertyName = 'value'\t\t-- propiedad del dispositivo para recuperar la energia\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.resetButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\ncceEstado = 'cceEstado'     -- nombre variable global para almacenar el estado\ncceConsumo = 'cceConsumo'   -- nombre variable global para almacenar consumo\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return true end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\nresetConsumo()\n\tinicializa la tabla de consumos\n--]]\nfunction resetConsumo()\n  -- si no exite la variable global para almacenar consumos\n  if not isVariable(cceConsumo) then\n    -- intentar crear la variableGlobal\n    local json = '{\"name\":\"'..cceConsumo..'\", \"isEnum\":0}'\n    HC2 = Net.FHttp(\"127.0.0.1\", 11111)\n    HC2:POST(\"/api/globalVariables\", json)\n    fibaro:sleep(1000)\n    -- comprobar que se ha creado la variableGlobal\n    if not isVariable(cceConsumo) then\n      _log(DEBUG, 'No se pudo declarar variable global '..cceConsumo)\n      fibaro:abort()\n    end\n  end\n  -- si no exite la variable global para almacenar estado\n  if not isVariable(cceEstado) then\n    -- intentar crear la variableGlobal\n    local json = '{\"name\":\"'..cceEstado..'\", \"isEnum\":0}'\n    HC2 = Net.FHttp(\"127.0.0.1\", 11111)\n    HC2:POST(\"/api/globalVariables\", json)\n    fibaro:sleep(1000)\n    -- comprobar que se ha creado la variableGlobal\n    if not isVariable(cceEstado) then\n      _log(DEBUG, 'No se pudo declarar variable global '..cceEstado)\n      fibaro:abort()\n    end\n  end\n\n  -- vaciar variables globales\n  local tablaConsumo, tablaEstado\n  -- crear una tablas vacías\n  tablaConsumo = {}\n  tablaEstado = {consumoOrigen = {}}\n\n  -- almacenar el consumoOrigen\n  local timeStamp = tonumber(fibaro:getModificationTime(energyDev,propertyName))\n  local consumo = tonumber(fibaro:getValue(energyDev, propertyName))\n  tablaEstado['consumoOrigen'].kWh = consumo\n  tablaEstado['consumoOrigen'].timeStamp = tonumber(timeStamp)\n\n  -- almacenar el id del VD en el estado para saber que ha sido iniciada\n  tablaEstado['VDId'] = _selfId\n\n  -- guardar las tablas en la variables globales\n  fibaro:setGlobal(cceConsumo, json.encode(tablaConsumo))\n  fibaro:setGlobal(cceEstado, json.encode(tablaEstado))\n\n  return tablaEstado, tablaConsumo\nend\n\n--[[----------------------------------------------------------------------------\nbisiesto(anno)\n\tdevuelve true o false si es año(anno) bisiesto o no\n--]]\nfunction bisiesto(anno)\n  if (anno % 4 == 0 and (anno % 100 ~= 0 or anno % 400 == 0)) then\n    return true\n\tend\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDiasMes(mes, anno)\n\tdevuelve cuantos días tiene el mes(mes) del año(anno) indicados.\n--]]\nfunction getDiasMes(mes, anno)\n  local diasDelMes = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  if bisiesto(anno) then diasDelMes[2] = 29 end\n  return diasDelMes[mes]\nend\n\n--[[------- INICIA LA EJECUCION ----------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n-- resetear y recuperar la tabla de consumo\nlocal tablaEstado, tablaConsumo\ntablaEstado, tablaConsumo = resetConsumo()\n\n-- proponer como dia de inicio de ciclo el mismo dia del mes siguiente a la\n-- fecha origen de ciclo actual\nlocal dia, mes, anno, dias, segs, fecha, stamp\n-- obtener fecha origen\nstamp = os.time()\n-- otener dia, mes y año de la fecha origen\ndia = tonumber(os.date('%d', stamp))\nmes = tonumber(os.date('%m', stamp))\nanno = tonumber(os.date('%Y'))\n-- averiguar los dias que tiene el mes\ndias = getDiasMes(mes, anno)\n-- averiguar los segundos que tiene el mes\nsegs = 86400 * dias\n-- saltar un mes\nfecha = os.date('%d/%m/%y', os.time({month = mes, day = dia,\n year = anno}) + segs)\n -- refrescar la etiqueta diaInicioCiclo\nfibaro:call(_selfId, 'setProperty', 'ui.diaInicioCiclo.value', fecha)\n_log(DEBUG, 'Fecha próximo ciclo: '..fecha)\n\n-- invocar al boton de actualizacion de datos\nfibaro:call(_selfId, \"pressButton\", \"6\")\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n_log(DEBUG, cceConsumo..' '..cceEstado)\n_log(INFO, cceConsumo..': '..fibaro:getGlobalValue(cceConsumo))\n_log(INFO, cceEstado..': '..fibaro:getGlobalValue(cceEstado))\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"Act⏎","name":"updateButton","empty":false,"msg":"--[[ControlConsumoElect\n\tDispositivo virtual\n\tupdateButton.lua\n\tpor Antonio Maestre & Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nlocal potenciacontratadakw = 4.4                  -- potencia contratada\nlocal preciokwhmercadolibre = 0.141422            -- precio kWh mercado libre\nlocal precioalquilerequipodia = 0.028644          -- alquiler de contador\nlocal porcentajeIVA = 21                          -- % IVA\nlocal porcentajeimpuestoelectricidad = 5.1127     -- % impuesto de electricidad\nlocal preciokwhterminofijo = 0.115187             -- percio kWh termino fijo\nlocal pvpc = true                                 -- si se usa tarifa PVPC\nlocal pvpcTipoTarifa = '20'                       -- '20', '20H', '20HS'\nlocal porcentajeAjusteRecomendacion = 3           -- % por encima precio medio\nlocal iDIconoRecomendadoSI = 1056                 -- icomo recomendar consumo\nlocal iDIconoRecomendadoNO = 1055                 -- icono NO recomendar consumo\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='ControlConsumoElect.updateButton', ver=0, mayor=0,\n minor=4}\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\ncceEstado = 'cceEstado'     -- nombre variable global para almacenar el estado\ncceConsumo = 'cceConsumo'   -- nombre variable global para almacenar consumos\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = DEBUG                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\n_log(level, log)\n\tfuncion para operar el nivel de LOG\n------------------------------------------------------------------------------]]\nfunction _log(level, log)\n  if log == nil then log = 'nil' end\n  if nivelLog >= level then\n    fibaro:debug(log)\n  end\n  return\nend\n\n--[[----------------------------------------------------------------------------\nredondea(num, idp)\n  devuelve el numero (num) redondeado a (idp) decimales\n--]]\nfunction redondea(num, idp)\n  local mult = 10^(idp or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n--[[----------------------------------------------------------------------------\ngetPVPC(tipo)\n\tdevuelve el valor del pecio valuntario para pequeño consumidor de la hora o\n\tdel dia.\n\ttipo = 'dia'/'hora'\n--]]\nfunction getPVPC(tipo)\n  -- solo se puede recibir como parametro 'hora' o 'dia'\n  if (tipo ~='dia' and tipo ~='hora') then\n    return 1, 'solo se admite dia/hora'\n  end\n  local payload = '/'..tipo\n  -- si el tipo es hora, se toma la hora actual si no el dia de hoy\n  if tipo == 'hora' then tipo = os.date('%H') else tipo = 'hoy' end\n  local cnomys = Net.FHttp(\"pvpc.cnomys.es\")\n  response, status, errorCode = cnomys:GET(payload)\n  if tonumber(status) == 200 then\n    local jsonTable = json.decode(response)\n    if (jsonTable.estado == true) then\n      for key, value in pairs(normalizaPVPCTab(jsonTable.datos)) do\n        if value.clave == tipo then\n          return 0, value.precio\n        end\n      end\n    else\n      if jsonTable['razon_error'] then return 1, jsonTable['razon_error'] end\n      return 1, 'error desconocido'\n    end\n  else\n    return 1, errorCode\n  end\n  return 1, 'dia/hora no corresponde con el actual'\nend\n\n--[[----------------------------------------------------------------------------\nnormalizaPVPCTab(precioTab)\n  -- recive una tabla de precio de cada hora representados por el indice y\n  -- devuelve una tabla con el formato {clave, precio} con los precios del tipo\n  -- de tarifa declarada en la variable pvpcTipoTarifa\n--]]\nfunction normalizaPVPCTab(precioTab)\n  local preciosTab = {}\n  for key, value in pairs(precioTab) do\n    if value then\n      preciosTab[#preciosTab + 1] = {clave = key, precio = value[pvpcTipoTarifa]}\n    end\n  end\n  return preciosTab\nend\n\n--[[----------------------------------------------------------------------------\ngetConsumo(stampIni, stampFin)\n\tdevuelve el consumo desde el momento inicado hasta la actualidad o stampFin\n--]]\nfunction getConsumo(stampIni, stampFin)\n  local tablaEstado, tablaConsumo, consumo, importeAcumulado\n  -- recuperar la tabla de consumos\n  tablaConsumo = json.decode(fibaro:getGlobalValue(cceConsumo))\n  -- recuperar la tabla de estado\n  tablaEstado = json.decode(fibaro:getGlobalValue(cceEstado))\n  consumo = 0; importe = 0\n  -- si no se indica el principio del ambito\n  if not stampIni then\n    -- se devuelve el total y el importe\n    for key, value in pairs(tablaConsumo) do\n      if value['kWh'] then consumo = consumo + value['kWh'] end\n      if value['EUR'] then importe = importe + value['EUR'] end\n    end\n    return consumo, importe\n  elseif stampIni == 0 then -- si se indica 0 como inicio del ambito\n    -- devolver el consumo origen\n    return  tablaEstado['consumoOrigen'].kWh\n  end\n  -- si no se indica el final se toma el momento actual\n  if not stampFin then stampFin = os.time() end\n  -- se devuelve el total del ambito indicado (stampIni, stampFin) e importe\n  for key, value in pairs(tablaConsumo) do\n    local stampActual = value.timeStamp\n    if stampActual > stampIni and stampActual <= stampFin then\n      consumo = consumo + value.kWh\n      importe = importe + value.EUR\n    end\n  end\n  return consumo, importe\nend\n\n--[[----------------------------------------------------------------------------\nsetEstado(varName, mensaje))\n\tconfigura el estado del dispositivo virtual\n--]]\nfunction setEstado(varName, mensaje)\n  local tablaEstado\n  -- recuperar la tabla de control de energía desde la variable global\n  tablaEstado = json.decode(fibaro:getGlobalValue(varName))\n  -- asignar el mensaje del estado\n  tablaEstado.mensaje = mensaje\n  -- guardar la tabla de control de energía en la variable global\n  fibaro:setGlobal(varName, json.encode(tablaEstado))\nend\n\n--[[----- INICIAR ------------------------------------------------------------]]\n_log(INFO, release['name']..\n' ver '..release['ver']..'.'..release['mayor']..'.'..release['minor'])\n\n-- obtener el precio kWh\nlocal preciokwh = preciokwhmercadolibre -- TODO se puede obtener de una web?.\nlocal precioMedioDia = 0\nif pvpc then\n  -- obtener el precio para esta hora\n  status, preciokwh = getPVPC('hora')\n  -- si no se puede obtener precio\n  if status ~= 0 then\n    -- informar del error\n    _log(INFO, 'Error al obtener precio hora: '..preciokwh)\n    --  y tomar precio anterior\n    preciokwh = tonumber(string.sub(fibaro:get(_selfId, 'ui.PrecioHora.value'),\n     1, 7))\n  else\n    preciokwh = tonumber(preciokwh)\n  end\n  -- obtener precio medio del día\n  status, precioMedioDia = getPVPC('dia')\n  -- si no se puede obtener precio medio dia\n  if status ~= 0 then\n    -- informar del error\n    _log(INFO, 'Error al obtener precio medio día: '..precioMedioDia)\n    --  y tomar precio hora no recomendable\n    precioMedioDia = preciokwh * (1 + porcentajeAjusteRecomendacion/100)\n  else\n    precioMedioDia = tonumber(precioMedioDia)\n  end\nend\n-- refrescar etiqueta de precio hora\nfibaro:call(_selfId, \"setProperty\", \"ui.PrecioHora.value\",preciokwh..' €/kWh')\n_log(DEBUG, 'Precio hora: '..preciokwh..' €/kWh')\n\n-- calcular recomendacion consumo\nlocal iconoRecomendado, textoRecomendacion\niconoRecomendado = iDIconoRecomendadoSI; textoRecomendacion = 'Aprovechar'\nif (preciokwh > (precioMedioDia * (1 + porcentajeAjusteRecomendacion/100))) then\n  iconoRecomendado = iDIconoRecomendadoNO\n  textoRecomendacion = 'Esperar'\nend\n\n_log(DEBUG, 'Precio medio día: '..precioMedioDia ..' €/kwh')\n-- refrescar icono recomendacion\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", iconoRecomendado)\n-- refrescar el log\nsetEstado(cceEstado, 'Recomendación de consumo '..textoRecomendacion)\n\n-- recuperar la tabla de estado\nlocal tablaEstado = json.decode(fibaro:getGlobalValue(cceEstado))\n-- guardar recomendación y precio\ntablaEstado['recomendacion'] = iconoRecomendado\ntablaEstado['preciokwh'] = preciokwh\n-- almacenar en la variable global\nfibaro:setGlobal(cceEstado, json.encode(tablaEstado))\n\n-- esperar para que se anoten los consumos desde la escena\n_log(DEBUG, 'Esperando registro de consumos')\nfibaro:sleep(2000)\n\n-- obtener consumo origen\nlocal consumoOrigen = tablaEstado['consumoOrigen'].kWh\n-- refrescar etiqueta de consumo origen\nfibaro:call(_selfId, 'setProperty',\n 'ui.ActualOrigen.value',tostring(consumoOrigen)..' kWh')\n\n-- comienza el calculo de consumos e importes\n_log(DEBUG, 'comienza el calculo de consumos')\n\n-- calcular consumo acumulado de la ultima hora\nlocal consumoUltimaHora, importeUltimaHora\n-- restar los segundos de una hora o desde la horaActual:00 ?\nconsumoUltimaHora, importeUltimaHora = getConsumo(os.time() - 3600, os.time())\n_log(DEBUG, 'Consumo última hora: '..consumoUltimaHora)\n-- refrescar etiqueta consumo ultima hora\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimaHora.value\",\n redondea(consumoUltimaHora, 2)..'kWh/'..\n redondea(importeUltimaHora, 2)..'€')\n\n-- calcular consumo acumulado del dia\n-- restar los segundos de un dia 24h o calcular desde las 00:00h?\n--consumoActual = getConsumo(os.time() - 3600 * 24, os.time())\nlocal stampIni, consumoAcumuladoDia, importeAcumuladoDia\nstampIni = os.time({year = tonumber(os.date('%Y')),\n month = tonumber(os.date('%m')), day = tonumber(os.date('%d')),\n hour = 0, min = 0, sec = 0})\n _log(DEBUG, 'El día comenzó: '..os.date('%d-%m-%Y/%H:%M:%S', stampIni))\nconsumoAcumuladoDia, importeAcumuladoDia = getConsumo(stampIni, os.time())\n_log(DEBUG, 'Consumo último día: '..consumoAcumuladoDia)\n-- refrescar etiqueta consumo del ultimo dia\nfibaro:call(_selfId, \"setProperty\", \"ui.Ultimas24H.value\",\n redondea(consumoAcumuladoDia, 2).. ' kWh/'..\n redondea(importeAcumuladoDia, 2)..'€')\n--redondea(consumoActual*preciokwh, 2)..\" €\")\n\n-- calcular consumo del ultimo ciclo\nlocal consumoUltimoCiclo, euroterminoconsumo\nconsumoUltimoCiclo, euroterminoconsumo = getConsumo()\n_log(DEBUG, 'Consumo último ciclo: '..consumoUltimoCiclo)\n-- refrescar etiqueta consumo del ultimo ciclo\nfibaro:call(_selfId, \"setProperty\", \"ui.UltimoCiclo.value\",\n redondea(consumoUltimoCiclo, 2).. ' kWh/'..\n redondea(euroterminoconsumo, 2)..'€')\n\n -- obtener potencia media\n local potenciaMedia = tablaEstado['energia']\n _log(DEBUG, 'Potencia media: '.. potenciaMedia..' W')\n -- refrescar etiqueta potencia media\n fibaro:call(_selfId, \"setProperty\", \"ui.PotenciaMedia.value\",\n  redondea(potenciaMedia, 2)..'W')\n\n--[[------- ACTUALIZAR FACTURA VIRTUAL ---------------------------------------]]\nlocal timeOrigen, timeAhora, diasDesdeInicio\n-- obtener timestamp del origen de ciclo\ntimeOrigen = tablaEstado['consumoOrigen'].timeStamp\n-- obtener timestamp actual\ntimeAhora = os.time()\n-- calcular dias transcurridos desde inicio de ciclo\ndiasDesdeInicio = math.floor((timeAhora - timeOrigen) / (24*60*60)) + 1\n_log(DEBUG, 'Dias desde inicio de ciclo: '..diasDesdeInicio)\n-- FIN proceso\n\n-- calcular precio termino fijo\nlocal euroterminofijopotenciames = potenciacontratadakw * preciokwhterminofijo\n * diasDesdeInicio\n _log(DEBUG, 'Precio termino fijo: '..euroterminofijopotenciames)\n -- refrescar etiqueta precio termino fijo\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoFijo.value\",\n redondea(euroterminofijopotenciames, 3) .. \" €\")\n\n -- calcular consumo del ultimo ciclo e importe\n_log(DEBUG, 'Precio termino consumo: '..euroterminoconsumo)\n-- refrescar etiqueta precio termino consumo\nfibaro:call(_selfId, \"setProperty\", \"ui.TerminoConsumo.value\",\n redondea(euroterminoconsumo, 3) .. \" €\")\n\n-- calcular precio impuesto electricidad\nlocal impuestoelectricidad = (euroterminofijopotenciames+euroterminoconsumo) *\n porcentajeimpuestoelectricidad/100\n _log(DEBUG, 'Precio impuesto electricidad: '..impuestoelectricidad)\n -- refrescar etiqueta precio impuesto electricidad\nfibaro:call(_selfId, \"setProperty\", \"ui.ImpuestoElectricidad.value\",\n redondea(impuestoelectricidad, 3) .. \" €\")\n\n-- calcular precio alquiler equipo\nlocal euroalquilerequipos = precioalquilerequipodia * diasDesdeInicio\n_log(DEBUG, 'Precio alquiler equipo: '..euroalquilerequipos)\n-- refrescar etiqueta precio alquiler equipo\nfibaro:call(_selfId, \"setProperty\", \"ui.AlquilerEquipos.value\",\n redondea(euroalquilerequipos, 3) .. \" €\")\n\n-- calcular el IVA\nlocal IVA = (euroterminofijopotenciames + euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos) * porcentajeIVA/100\n _log(DEBUG, 'IVA: '..IVA)\n -- refrescar etiqueta IVA\nfibaro:call(_selfId, \"setProperty\", \"ui.IVA.value\", redondea(IVA, 3) .. \" €\")\n\n-- calcular TOTAL\nlocal Total = euroterminofijopotenciames+euroterminoconsumo +\n impuestoelectricidad + euroalquilerequipos+IVA\n _log(DEBUG, 'Total factura: '..Total)\n -- refrescar etiqueta total factura\nfibaro:call(_selfId, \"setProperty\", \"ui.Total.value\",\nredondea(Total, 3) .. \" €\")\n--[[----- FIN DE LA EJECUCION ------------------------------------------------]]\n\n--[[----- INFORME DE RESULTADOS ----------------------------------------------]]\n--[[----- FIN INFORME DE RESULTADOS ------------------------------------------]]\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"Potencia Media","name":"PotenciaMedia","favourite":false,"main":true}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"Precio Actual","name":"PrecioHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"Consumo Hora","name":"UltimaHora","favourite":false,"main":false}]},{"type":"label","elements":[{"id":10,"lua":false,"waitForResponse":false,"caption":"Consumo Día","name":"Ultimas24H","favourite":false,"main":false}]},{"type":"label","elements":[{"id":11,"lua":false,"waitForResponse":false,"caption":"Consumo Ciclo","name":"UltimoCiclo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"Término fijo","name":"TerminoFijo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":13,"lua":false,"waitForResponse":false,"caption":"Consumo","name":"TerminoConsumo","favourite":false,"main":false}]},{"type":"label","elements":[{"id":14,"lua":false,"waitForResponse":false,"caption":"Alquiler Equipo","name":"AlquilerEquipos","favourite":false,"main":false}]},{"type":"label","elements":[{"id":15,"lua":false,"waitForResponse":false,"caption":"Impuesto Elect.","name":"ImpuestoElectricidad","favourite":false,"main":false}]},{"type":"label","elements":[{"id":16,"lua":false,"waitForResponse":false,"caption":"IVA","name":"IVA","favourite":false,"main":false}]},{"type":"label","elements":[{"id":17,"lua":false,"waitForResponse":false,"caption":"Total","name":"Total","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}